// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionSystemClient is the client API for AuctionSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionSystemClient interface {
	AskForBid(ctx context.Context, in *AskForHighestBid, opts ...grpc.CallOption) (*HighestBid, error)
	MakeABid(ctx context.Context, in *MakeBid, opts ...grpc.CallOption) (*Ack, error)
}

type auctionSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionSystemClient(cc grpc.ClientConnInterface) AuctionSystemClient {
	return &auctionSystemClient{cc}
}

func (c *auctionSystemClient) AskForBid(ctx context.Context, in *AskForHighestBid, opts ...grpc.CallOption) (*HighestBid, error) {
	out := new(HighestBid)
	err := c.cc.Invoke(ctx, "/AuctionSystem.AuctionSystem/AskForBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionSystemClient) MakeABid(ctx context.Context, in *MakeBid, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/AuctionSystem.AuctionSystem/MakeABid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionSystemServer is the server API for AuctionSystem service.
// All implementations must embed UnimplementedAuctionSystemServer
// for forward compatibility
type AuctionSystemServer interface {
	AskForBid(context.Context, *AskForHighestBid) (*HighestBid, error)
	MakeABid(context.Context, *MakeBid) (*Ack, error)
	mustEmbedUnimplementedAuctionSystemServer()
}

// UnimplementedAuctionSystemServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionSystemServer struct {
}

func (UnimplementedAuctionSystemServer) AskForBid(context.Context, *AskForHighestBid) (*HighestBid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForBid not implemented")
}
func (UnimplementedAuctionSystemServer) MakeABid(context.Context, *MakeBid) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeABid not implemented")
}
func (UnimplementedAuctionSystemServer) mustEmbedUnimplementedAuctionSystemServer() {}

// UnsafeAuctionSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionSystemServer will
// result in compilation errors.
type UnsafeAuctionSystemServer interface {
	mustEmbedUnimplementedAuctionSystemServer()
}

func RegisterAuctionSystemServer(s grpc.ServiceRegistrar, srv AuctionSystemServer) {
	s.RegisterService(&AuctionSystem_ServiceDesc, srv)
}

func _AuctionSystem_AskForBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForHighestBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionSystemServer).AskForBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuctionSystem.AuctionSystem/AskForBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionSystemServer).AskForBid(ctx, req.(*AskForHighestBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionSystem_MakeABid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionSystemServer).MakeABid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuctionSystem.AuctionSystem/MakeABid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionSystemServer).MakeABid(ctx, req.(*MakeBid))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionSystem_ServiceDesc is the grpc.ServiceDesc for AuctionSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuctionSystem.AuctionSystem",
	HandlerType: (*AuctionSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForBid",
			Handler:    _AuctionSystem_AskForBid_Handler,
		},
		{
			MethodName: "MakeABid",
			Handler:    _AuctionSystem_MakeABid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
